vcpkg_from_github(
    OUT_SOURCE_PATH SOURCE_PATH
    REPO aholzinger/nmos-cpp
	REF f6da641161d8bad5d5c19cffc698aac99867c9b8
	SHA512 006ae689405a360690e99f3c492362ccd0b8fc5a190bdb84187c0afc44d2d7e20b01a0782cf5867a42997c1a84c6c07acbb6d4dab3784173f3df311f529db79c
    HEAD_REF master
)

set (NMOS_CPP_OPTIONS_DEBUG)
set (NMOS_CPP_OPTIONS_RELEASE)

set (NMOS_CPP_OPTIONS_INCLUDE_PREFIX "-DNMOS_CPP_INCLUDE_PREFIX=/nmos-cpp")
set (NMOS_CPP_OPTIONS_PLATFORM_LIBS)
set (NMOS_CPP_OPTIONS_USE_CONAN "-DUSE_CONAN=OFF")
set (NMOS_CPP_OPTIONS_USE_VCPKG "-DUSE_VCPKG=ON")
set (NMOS_CPP_OPTIONS_USE_STATIC_RUNTIME)
set (NMOS_CPP_OPTIONS_WEBSOCKETPP_INCLUDE_DIR)
set (NMOS_CPP_LINKAGE_SUFFIX)


if (DEFINED VCPKG_TARGET_IS_WINDOWS AND ${VCPKG_TARGET_IS_WINDOWS} STREQUAL "1")
    if (${VCPKG_CRT_LINKAGE} STREQUAL "static")
        set (NMOS_CPP_OPTIONS_USE_STATIC_RUNTIME "-DUSE_STATIC_RUNTIME=ON")
        set (NMOS_CPP_OPTIONS_DEBUG "-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDebug")
        set (NMOS_CPP_OPTIONS_RELEASE "-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded")
    else()
        if (${VCPKG_CRT_LINKAGE} STREQUAL "dynamic")
            set (NMOS_CPP_OPTIONS_PLATFORM_LIBS -DPLATFORM_LIBS="Winhttp.lib;httpapi.lib;bcrypt.lib;crypt32.lib")
            set (NMOS_CPP_OPTIONS_USE_STATIC_RUNTIME "-DUSE_STATIC_RUNTIME=OFF")
            set (NMOS_CPP_OPTIONS_DEBUG "-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDebugDLL")
            set (NMOS_CPP_OPTIONS_RELEASE "-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL")
        endif()
    endif()
else()
    # not yet tested
    # perhaps this isn't necessary
    if (DEFINED VCPKG_TARGET_IS_LINUX AND ${VCPKG_TARGET_IS_LINUX} STREQUAL "1")
        set(NMOS_CPP_OPTIONS_WEBSOCKETPP_INCLUDE_DIR "-DWEBSOCKETPP_INCLUDE_DIR=${VCPKG_ROOT_PATH}/packages/websocketpp_${VCPKG_TARGET_ARCHITECTURE}-linux${NMOS_CPP_LINKAGE_SUFFIX}/include/websocketpp")
    endif()
endif()

set(CMAKE_POLICY_DEFAULT_CMP0074 NEW)
set(CMAKE_POLICY_DEFAULT_CMP0091 NEW)

set(OPTIONS)
vcpkg_configure_cmake(
    SOURCE_PATH "${SOURCE_PATH}/Development"
    PREFER_NINJA
	OPTIONS
        ${NMOS_CPP_OPTIONS_INCLUDE_PREFIX}
        ${NMOS_CPP_OPTIONS_USE_CONAN}
        ${NMOS_CPP_OPTIONS_USE_VCPKG}
        ${NMOS_CPP_OPTIONS_USE_STATIC_RUNTIME}
        ${NMOS_CPP_OPTIONS_PLATFORM_LIBS}
        ${NMOS_CPP_OPTIONS_WEBSOCKETPP_INCLUDE_DIR}
    OPTIONS_DEBUG
        ${NMOS_CPP_OPTIONS_DEBUG}
    OPTIONS_RELEASE
        ${NMOS_CPP_OPTIONS_RELEASE}
)

vcpkg_install_cmake()

message(STATUS "CURRENT_PACKAGES_DIR = ${CURRENT_PACKAGES_DIR}")

# vcpkg_fixup_cmake_targets(CONFIG_PATH share/nmos-cpp)
# vcpkg_fixup_cmake_targets()

file(REMOVE_RECURSE "${CURRENT_PACKAGES_DIR}/debug/include")
file(REMOVE_RECURSE ${CURRENT_PACKAGES_DIR}/debug/share ${CURRENT_PACKAGES_DIR}/share)

file(INSTALL
    ${SOURCE_PATH}/LICENSE
    DESTINATION ${CURRENT_PACKAGES_DIR}/share/nmos-cpp RENAME copyright)

vcpkg_copy_pdbs()
